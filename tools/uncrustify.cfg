# SPDX-FileCopyrightText: Â© 2019 Alexandros Theodotou <alex@zrythm.org>
# SPDX-License-Identifier: LicenseRef-ZrythmLicense

# Based on GNU C coding style

# 1=indent to level only, 2=indent with tabs
indent_with_tabs = 0
# original tab size
input_tab_size = 8
# new tab size
output_tab_size = 8
indent_columns = 2
# pos: absolute col, neg: relative column
# indent_label = 2
# align broken strings
indent_align_string = False
indent_brace      = 2

# "enum {" vs "enum \n {"
nl_enum_brace = add
# "union {" vs "union \n {"
nl_union_brace = add
# "struct {" vs "struct \n {"
nl_struct_brace = add
# "do {" vs "do \n {"
nl_do_brace = add
# "if () {" vs "if () \n {"
nl_if_brace = add
# "for () {" vs "for () \n {"
nl_for_brace = add
# "else {" vs "else \n {"
nl_else_brace = add
# "while () {" vs "while () \n {"
nl_while_brace = add
# "switch () {" vs "switch () \n {"
nl_switch_brace = add
nl_func_var_def_blk = 1
nl_before_case = 1
# "foo() {" vs "foo()\n{"
nl_fcall_brace = add
# "int foo() {" vs "int foo()\n{"
nl_fdef_brace = force
# nl_after_return = TRUE
nl_brace_while = remove
nl_brace_else = add
nl_squeeze_ifdef = TRUE

# "return 1;" vs "return (1);"
mod_paren_on_return = ignore
# "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_if = ignore
# "for () a--;" vs "for () { a--; }"
mod_full_brace_for = ignore
# "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_do = ignore
# "while (a) a--;" vs "while (a) { a--; }"
mod_full_brace_while = ignore

sp_before_semi = remove
# space between (( and ))
sp_paren_paren = remove
# "return (1);" vs "return(1);"
sp_return_paren = force
# "sizeof (int)" vs "sizeof(int)"
sp_sizeof_paren = force
# "if (" vs "if("
sp_before_sparen = force
# "if () {" vs "if (){"
sp_after_sparen = force
# "(int) a" vs "(int)a"
sp_after_cast = force
# "{ 1 }" vs "{1}"
sp_inside_braces = force
# "{ 1 }" vs "{1}"
sp_inside_braces_struct = force
# "{ 1 }" vs "{1}"
sp_inside_braces_enum = force
sp_inside_paren = remove
sp_inside_fparen = remove
sp_inside_sparen = remove
sp_type_func = force
sp_assign = force
sp_arith = force
sp_bool = force
sp_compare = force
sp_after_comma = force
# "int foo (){" vs "int foo(){"
sp_func_def_paren = force
# "foo (" vs "foo("
sp_func_call_paren = force
# "int foo ();" vs "int foo();"
sp_func_proto_paren = force

# align_with_tabs      = FALSE    # use tabs to align
# align_on_tabstop    = FALSE    # align on tabstops
# align_enum_equ_span    = 4
# align_nl_cont      = TRUE
# align_var_def_span    = 2
# align_var_def_inline    = TRUE
# align_var_def_star    = TRUE
# align_var_def_colon    = TRUE
# align_assign_span    = 1
# align_struct_init_span    = 3
# align_var_struct_span    = 3
# align_right_cmt_span    = 3
# align_pp_define_span    = 3
# align_pp_define_gap    = 4
# align_number_right    = TRUE
# align_typedef_span    = 5
# align_typedef_gap    = 3

# cmt_star_cont      = TRUE

eat_blanks_before_close_brace = TRUE
eat_blanks_after_open_brace = TRUE
